{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["import jsf from \"json-schema-faker\";\n\n/**\n * JSF basic schema extension\n */\ninterface IGeneratorSchema {\n  faker?: any;\n  \"x-faker\"?: any;\n  chance?: any;\n  \"x-chance\"?: any;\n  casual?: any;\n  \"x-casual\"?: any;\n}\n\ninterface ICommonSchema {\n  type?: ISchemaType;\n}\n\ninterface IStringSchema extends IGeneratorSchema, ICommonSchema {\n  format?: string;\n  pattern?: RegExp;\n  minLength?: number;\n  maxLength?: number;\n}\n\ninterface INumberSchema extends IGeneratorSchema, ICommonSchema {\n  multipleOf?: number;\n  minimum?: number;\n  maximum?: number;\n  exclusiveMinimum?: boolean;\n  exclusiveMaximum?: boolean;\n}\n\ninterface IArraySchema extends IGeneratorSchema, ICommonSchema {\n  items?: IObjectSchema | IObjectSchema[] | IReferenceSchema;\n  additionalItems?: boolean | IObjectSchema;\n  minItems?: number;\n  maxItems?: number;\n  uniqueItems?: boolean;\n}\n\ninterface IPropertySchema {\n  [property: string]:\n    | IObjectSchema\n    | IArraySchema\n    | INumberSchema\n    | IStringSchema\n    | IReferenceSchema;\n}\n\ninterface IPatternPropertiesSchema {\n  [property: string]: {};\n}\n\ninterface IObjectSchema extends IGeneratorSchema, ICommonSchema {\n  properties?: IPropertySchema;\n  patternProperties?: IPropertySchema; // RegExp should be the index of this structure (see \"5.4.4.1. Valid values\" in http://json-schema.org/latest/json-schema-validation.html), but RegExp-key-based maps are unsupported in TypeScript\n  additionalProperties?: boolean;\n  required?: string[];\n  minProperties?: number;\n  maxProperties?: number;\n  enum?: any[];\n}\n\ninterface IReferenceSchema {\n  $ref?: string;\n}\n\ntype SchemaPath = string[];\n\ntype StackTrace = string[];\n\n/**\n * This interface is used to check consistency between type generators (string, boolean, array, etc.)\n */\ninterface FTypeGenerator {\n  (\n    value?: IGeneratorSchema,\n    path?: SchemaPath,\n    resolve?: Function,\n    traverseCallback?: Function\n  ): any;\n}\n\ninterface IStringMap {\n  [format: string]: string;\n}\n\n/**\n * JSON Schema TypeScript interface.\n *\n * fetched from https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/tv4/tv4.d.ts\n */\nexport interface JsonSchema\n  extends IGeneratorSchema,\n    ICommonSchema,\n    IObjectSchema,\n    IArraySchema,\n    INumberSchema,\n    IStringSchema {\n  [key: string]: any;\n  title?: string;\n  description?: string;\n  id?: string;\n  $schema?: string;\n  definitions?: any;\n  default?: any;\n}\n\nexport type ISchemaType =\n  | \"string\"\n  | \"integer\"\n  | \"number\"\n  | \"object\"\n  | \"array\"\n  | \"boolean\";\n\nexport function fake(schema: JsonSchema, refs?: JsonSchema[]) {\n  return jsf.generate(schema, refs);\n}\n\nexport function asyncFake(schema: JsonSchema, refs?: JsonSchema[]) {\n  return jsf.resolve(schema, refs);\n}\n\nexport default { fake, asyncFake };\n"],"names":["fake","schema","refs","jsf","generate","asyncFake","resolve"],"mappings":"iQAqHgBA,EAAKC,EAAoBC,UAChCC,EAAIC,SAASH,EAAQC,YAGdG,EAAUJ,EAAoBC,UACrCC,EAAIG,QAAQL,EAAQC,sDAGd,MAAEF,YAAMK"}